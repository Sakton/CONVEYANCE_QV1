-- Базовые классы:
CREATE TABLE сities (
	city_id SERIAL UNIQUE,
	city_name VARCHAR( 256 ) NOT NULL UNIQUE,
	country_id INT,
	PRIMARY KEY ( city_id )
);

CREATE TABLE streets (
	street_id SERIAL UNIQUE,
	street_name varchar ( 256 ) NOT NULL UNIQUE
);

CREATE TABLE countrys (
	country_id SERIAL UNIQUE,
	vat_id INT NOT NULL,
	vatname_id INT NOT NULL,
	country_name VARCHAR(256) NOT NULL UNIQUE,
	country_abbreviated_2 VARCHAR(4) NOT NULL UNIQUE,
	country_abbreviated_3 VARCHAR(4) NOT NULL UNIQUE,
	country_icon VARCHAR(256),
	PRIMARY KEY ( country_id ),
	FOREIGN KEY ( vat_id ) REFERENCES vats ( vat_id )
		ON DELETE SET NULL,
	FOREIGN KEY ( vatname_id ) REFERENCES vatnames ( vatname_id )
		ON DELETE SET NULL
);

CREATE TABLE adress (
	adres_id SERIAL UNIQUE,
	country_id INT,
	city_id INT,
	street_id INT, 
	adres_type VARCHAR(15), -- тип адреса (Фактический, юридический)
	adres_index VARCHAR(10),
	PRIMARY KEY ( adres_id ),
	FOREIGN KEY ( country_id ) REFERENCES countrys ( country_id )
		ON DELETE SET NULL,
	FOREIGN KEY ( city_id ) REFERENCES cities ( city_id )
		ON DELETE SET NULL,
	FOREIGN KEY ( street_id ) REFERENCES streets ( street_id )
		ON DELETE SET NULL,
	CHECK ( adres_type IN ( 'Фактический', 'Юридический') )
);

-- ПРЕДСТАВЛЕНИЕ
CREATE OR REPLACE VIEW adress_view AS
 SELECT ad.adres_id,
        cntr.country_icon,
		cntr.country_name,
		ad.adres_index,
		ct.city_name,
		st.street_name,
		ad.adres_type
   FROM adress ad
     LEFT JOIN countrys cntr ON ad.country_id = cntr.country_id
     LEFT JOIN cities ct ON ad.city_id = ct.city_id
     LEFT JOIN streets st ON ad.street_id = st.street_id;

CREATE FUNCTION id_country ( cntr VARCHAR ) RETURNS INT 
AS $$ SELECT country_id FROM countrys WHERE country_name = cntr $$ LANGUAGE SQL;
	
CREATE FUNCTION id_city ( ct VARCHAR ) RETURNS INT 
AS $$ SELECT city_id FROM cities WHERE city_name = ct $$ LANGUAGE SQL;

CREATE FUNCTION id_street( st VARCHAR ) RETURNS INT 
AS $$ SELECT street_id FROM streets WHERE street_name = st $$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION insertOrIgnoreStreet( strt VARCHAR ) RETURNS BOOL AS
$$
BEGIN
	IF NOT EXISTS(  SELECT street_id FROM streets WHERE street_name = strt )
		THEN  INSERT INTO streets ( street_name ) VALUES ( strt );
			  RETURN TRUE;
		ELSE 
			RETURN FALSE;
	END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE insertOrIgnoreStreet( strt VARCHAR ) 
LANGUAGE plpgsql
AS $$
BEGIN
	IF NOT EXISTS(  SELECT 1 FROM streets WHERE street_name = strt )
		THEN  INSERT INTO streets ( street_name ) VALUES ( strt );
	END IF;
END
$$;

CREATE OR REPLACE PROCEDURE insert_adress ( cntr VARCHAR, ct VARCHAR, strt VARCHAR, idx VARCHAR, type_adress VARCHAR )
LANGUAGE SQL
AS $$
	INSERT INTO adress ( country_id, city_id, street_id, adres_index, adres_type )
	VALUES (  ( SELECT id_country( cntr ) ), ( SELECT id_city( ct ) ), ( SELECT id_street( strt ) ), idx, type_adress );
$$;

CREATE OR REPLACE PROCEDURE update_adress( id INT, cntr VARCHAR, ct VARCHAR, strt VARCHAR, idx VARCHAR, type_adress VARCHAR )
LANGUAGE SQL
AS $$
	CALL insertOrIgnoreStreet(strt);
	UPDATE adress SET country_id = ( SELECT id_country(cntr) ),
					  city_id = ( SELECT id_city(ct) ),
					  street_id = ( SELECT id_street(strt) ),
					  adres_type = type_adress,
					  adres_index = idx
	WHERE adres_id = id;
$$;

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		